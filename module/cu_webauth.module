<?php
// $Id$
/**
 * @file
 * Create Drupal users and let them login via CUWebAuth
 *
 *  adds a page '/cu_webauth'
 *  adds a block 'Cornell Login'
 *    configuring the block lets you add/remove a required permit name
 */

define("AUTHENTICATION_MODULE_NAME", "culauth"); // same as cul_login

require_once(dirname(__FILE__) . '/helpers/cu_webauth.php');

/**
 * Implements hook_permission.
 */
function cu_webauth_permission() {
  return array(
    'access cu_webauth checkbox' => array(
      'title' => t('Access CU_WebAuth checkbox'),
      'description' => t('Can set CU_WebAuth requirement for access to nodes'),
      ),
    'bypass cu_webauth' => array(
      'title' => t('Bypass CU_WebAuth'),
      'description' => t('Can bypass CU_WebAuth when required by a node'),
      ),
    );
}

/**
 * Implements hook_init().
 * this implements the patch for panels on http://drupal.org/node/362065
 */
function cu_webauth_init() {
  // Make sure CUWebAuth is triggered properly
  // when the node_view is overwritten by the Panels module
  if (module_exists('panels') && 'node' == arg(0) && is_numeric(arg(1))) {
    $node = node_load(arg(1));
    if (FALSE !== $node) {
      cu_webauth_node_view($node);
    }
  }
}

/**
 * Implements hook_menu().
 * this adds a page called 'cu_webauth' to any site using this module
 */
function cu_webauth_menu() {
  $items = array();

  $items['secure/cu_webauth_pin'] = array(
    'title' => 'Cornell University Mobile Login',
    'description' => 'Login with CUWebAuth and pin',
    'page callback' => 'cu_webauth_pin_page',
    //'access callback' => TRUE,
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    );

  $items['secure/cu_webauth'] = array(
    'title' => 'Cornell University Login',
    'description' => 'Login with CUWebAuth',
    'page callback' => 'cu_webauth_page2',
    //'access callback' => TRUE,
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    );
  $items['secure/cu_webauth/cuwebauth'] = array(
    'title' => 'Cornell University Login - CUWebAuth',
    'description' => 'CUWebAuth',
    'page callback' => 'cu_webauth_cuwebauth',
    //'access callback' => TRUE,
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'cu_webauth.admin.inc',
    );
  $items['secure/cu_webauth/account'] = array(
    'title' => 'Cornell University Login - Account',
    'description' => 'Account Check',
    'page callback' => 'cu_webauth_account',
    //'access callback' => TRUE,
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'cu_webauth.admin.inc',
    );
  $items['secure/cu_webauth/hello'] = array(
    'title' => 'Cornell University Login - User',
    'description' => 'User Information',
    'page callback' => 'cu_webauth_hello',
    //'access callback' => TRUE,
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'cu_webauth.admin.inc',
    );

  return $items;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter.
 */
function cu_webauth_form_node_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['#node']) && cu_webauth_can_set_auth()) {
    // Find the content type of the node we are editing.
    $content_type = $form['#node']->type;
    // webforms have node_form as a base form id
    // trial version without removing checkbox from webforms...
    if (true || $content_type != 'webform') {
      // Alter the other node forms here.
      $node = $form['#node'];
      $cuwebauth_set = cu_webauth_get_cuwebauth($node);
      $form['cuwebauth'] = array(
        '#type' => 'checkbox',
        '#title' => 'Require CUWebLogin?',
        '#default_value' => $cuwebauth_set ? 1 : 0,
        '#weight' => -10,
      );
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function cu_webauth_node_insert($node) {
  cu_webauth_manage_cuwebuath($node);
}

/**
 * Implements hook_node_update().
 */
function cu_webauth_node_update($node) {
  cu_webauth_manage_cuwebuath($node);
}

/**
 * Implements hook_node_delete().
 */
function cu_webauth_node_delete($node) {
  cu_webauth_manage_cuwebuath($node);
}

/**
 * Implements hook_node_view().
 */
function cu_webauth_node_view($node, $view_mode = 'full') {
  if ((! cu_webauth_can_bypass_auth()) && cu_webauth_get_cuwebauth($node)) {
    cu_webauth_authenticate();
  }
}

/**
 * Implements hook_block_info().
 */
function cu_webauth_block_info() {
  $blocks['cu_webauth_info']['info'] = t('Cornell Login');
  $blocks['cu_webauth_info']['cache'] = DRUPAL_CACHE_GLOBAL;
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function cu_webauth_block_configure($delta) {
  $form['cu_webauth_block_required_permit'] = array(
        '#type' => 'textfield',
        '#title' => t('Required CUWebAuth permit (eg. library)'),
        '#default_value' => variable_get('cu_webauth_block_required_permit', 'library'),
        );
  return $form;
}

/**
 * Implements hook_block_save().
 */
function cu_webauth_block_save($delta, $edit) {
  variable_set('cu_webauth_block_required_permit', t("@permit", array('@permit' => $edit['cu_webauth_block_required_permit'])));
}

/**
 * Implements hook_block_view().
 */
function cu_webauth_block_view($delta) {
  switch ($delta) {
    case 'cu_webauth_info':
      $block['subject'] = t("Cornell University Login");
      if (user_is_logged_in()) {
        $block['content'] = t('you are logged in');
      }
      else {
        $block['content'] = drupal_get_form('cu_webauth_form');
      }
      return $block;
      break;
  }
}

/**
 * Define the login form for the block
 */
function cu_webauth_form($form) {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('CU Login'),
    );
  return $form;
}

/**
 * Define the login form for cuwebauth login from page
 */
function cu_webauth_cuwebauth_form($form) {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('CUWebAuth Login'),
    );
  return $form;
}

/**
 * Define the login form for drupal login from page
 */
function cu_webauth_create_account_form($form) {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create User Account'),
    );
  return $form;
}

/**
 * Validate the form
 */
function cu_webauth_form_validate($form, &$form_state) {
  if (cu_webauth_test_authentication()) {
    // user is already authorized
    // we can get the netid without going back to CUWebAuth so this will return
    $netid = cu_webauth_authenticate_user();
    if (cu_webauth_valid_user($netid)) {
      // this is a Drupal user - is it one cu_webauth created?
      if (cu_webauth_created_user($netid)) {
        // this is a user cu_webauth created
        $form_state['cu_webauth']['valid_netid'] = $netid;
        return;
      }
    }
  }
  $form_state['cu_webauth']['redirect'] = 'cu_webauth'; // handle complexities
  //form_set_error('submit', t('Please use the regular cu_webauth page.'));
}

/**
 * Handle post-validation form submission
 */
function cu_webauth_form_submit($form, &$form_state) {
  if (isset($form_state['cu_webauth']['valid_netid'])) {
    $netid = $form_state['cu_webauth']['valid_netid'];
    cu_webauth_create_and_login_user($netid);
    drupal_set_message(t('Logged in as %name', array('%name' => $netid)));
  }
  else if (isset($form_state['cu_webauth']['redirect'])) {
    // just go to the login page to handle all the issues
    //$form_state['redirect'] = $form_state['cu_webauth']['redirect'];
    $form_state['redirect'] = array(
      'secure/cu_webauth',
      array('absolute' => TRUE, 'https' => TRUE),
      );
  }
}

/**
 * callback function for login page
 */
function cu_webauth_page2() {
  if (!cu_webauth_https()) {
    return MENU_ACCESS_DENIED;
  }
  if (cu_webauth_test_authentication()) {
    $path = "/secure/cu_webauth/account";
  }
  else {
    $path = "/secure/cu_webauth/cuwebauth";
  }
  drupal_goto($path);
}

/**
 * callback function for login with pin page
 */
function cu_webauth_pin_page() {
  global $user;
  $output = cu_webauth_page2();
  if (user_is_logged_in()) {
    $userid = $user->uid;
    $path = "user/$userid/edit/Mobile";
    drupal_goto($path);
  }
  return $output;
}

/**
 * create a new user if necessary but log them in
 */
function cu_webauth_create_and_login_user($netid) {
  // Log user in, or register new user if not already present
  user_external_login_register($netid, AUTHENTICATION_MODULE_NAME);

  // Write session, update timestamp, run user 'login' hook
  $edit = array();
  user_login_finalize($edit);
}

/**
 * see if user is already authenticated
 */
function cu_webauth_test_authentication() {
  $result = FALSE;
  if (function_exists('cu_webauth_verify_netid')) {
    // this will never go off to CUWebAuth never to return like cu_authenticate can!
    $result = cu_webauth_verify_netid();
  }
  else {
    drupal_set_message(t('Unable to verify netid.'));
  }
  return $result;
}

/**
 * login via CUWebAuth and return netid or FALSE
 */
function cu_webauth_authenticate_user($destination = NULL) {
  if (function_exists('cu_webauth_authenticate')) {
    if ($destination == NULL) {
      // put url of current page into destination
      $path = isset($_GET['q']) ? $_GET['q'] : '<front>';
      // note: this can not be an absolute path
    }
    // find if a permit is required
    $required_permit = variable_get('cu_webauth_block_required_permit', 'library');
    // if this has to go off to CUWebAuth it won't return from this function
    $netid = cu_webauth_authenticate($destination, $required_permit);
    return $netid;
  }
  return FALSE;
}

/**
 * logout via CUWebAuth
 */
function cu_webauth_logout($destination = NULL, $delete_cuwa_cookies = FALSE) {
  if (function_exists('cu_webauth_do_logout')) {
    cu_webauth_do_logout($destination, $delete_cuwa_cookies);
    return TRUE;
  }
  return FALSE;
}

/**
 * function to check if user name is a valid Drupal user
 */
function cu_webauth_valid_user($username) {
  $account = user_load_by_name($username);
  return (($account !== FALSE) && ($account->status == 1));
}


/**
 * function to check if this user was created by cu_webauth
 */
function cu_webauth_created_user($username) {
  $authmaps = user_get_authmaps($username);
  if (isset($authmaps[AUTHENTICATION_MODULE_NAME]) && $authmaps[AUTHENTICATION_MODULE_NAME] == $username) {
    return TRUE;
  }
  return FALSE;
}

// based on 'Pro Drupal Development' second edition by John K. VanDyk p. 130

/**
 * Implements hook_form_alter().
 */
function cu_webauth_form_alter(&$form, $form_state, $form_id) {
  // if the user was orginally authorized by CUWebAuth
  // make sure they still are authorized, even if they are logging in
  // through the regular Drupal methods.
  if ($form_id == 'user_login' || $form_id == 'user_login_block') {
    if (isset($form_state['post']['name'])) {
      // posting the form - add our validation function

      // watch out - user_login_authenticate_validate logs user in and skips subsequent validations
      $array_key = array_search('user_login_authenticate_validate', $form['#validate']);
      if ($array_key === FALSE) {
        // Could not find it, some other module must have run form_alter().
        // We simply add our validation just before the final validator.
        $final_validator = array_pop($form['#validate']);
        $form['#validate'][] = 'cu_webauth_regular_login_validate';
        $form['#validate'][] = $final_validator;
      }
      else {
        // insert just before user_login_authenticate_validate
        array_splice($form['#validate'], $array_key, 0, 'cu_webauth_regular_login_validate');
      }

      $msg = print_r($form['#validate'], true);
    }
  }
}

/**
 * Form validation handler.
 */
function cu_webauth_regular_login_validate($form, &$form_state) {
  // This should be used in conjunction with the Public Registrations option
  //    Only site administrators can create new user accounts.
  // on /admin/user/settings. We want to make sure a user has a fresh CUWebAuth
  // authorization. If they aren't able to get that we don't want them messing with
  // the Drupal site either.
  // Accounts set up via the cu_webauth form do not need admin intervention, but they only
  // have the 'Authenticated User' role initially.
  // Also be sure users can't change their user names away from netid so cu_webauth_is_cuwebauthorized works!
  $the_user_name = isset($form_state['values']['name']) ? $form_state['values']['name'] : '';
  if (cu_webauth_created_user($the_user_name)) {
    // this user account was originally created and authorized by cuwebauth
    // be sure the dude still has CUWebAuth
    if (!cu_webauth_authenticate_user()) {
      form_set_error('name', t('Please use the CUL Login for CUWebAuth authorization.'));
    }
  }
}

/**
 * cu_webauth_get_email_address - get email address for a netid
 */
function cu_webauth_get_email_address($netid) {
  // get email address from LDAP
  $fields = 'Mail';
  $vals = cu_webauth_get_ldap_data($fields, $netid);
  return isset($vals['mail']) ? $vals['mail'] : FALSE;
}


/**
 * Implements hook_user_insert().
 */
function cu_webauth_user_insert(&$edit, $account, $category) {
  // New user was just added; if we did authentication,
  // look up e-mail address of user in LDAP
  // note: cu_webauth_created_user  won't work at this time
  $the_user_name = $account->name;
  if (cu_webauth_test_authentication() &&
        ($netid = cu_webauth_authenticate_user()) == $the_user_name) {

    // get email address from LDAP
    $email = cu_webauth_get_email_address($netid);

    // Set e-mail address in the users table for this user.
    $user_obj = array_shift(user_load_multiple(array(), array('name' => $netid)));
    if (($user_obj !== FALSE) && ($email !== FALSE)) {
      $array = array();
      $array['mail'] = $email;
      $array['pass'] = sha1(rand(3, getrandmax())); // hard password so users will use CUWebAuth
      $userObj = user_save($user_obj, $array);
    }
    else {
      drupal_set_message(t("No user_obj or LDAP email."));
    }
  }
}

/**
 * Implements hook_user_logout().
 */
function cu_webauth_user_logout($account) {
  drupal_set_message(t('cu_webauth_user logout'));
  cu_webauth_logout();
}

/**
 * Implements hook_action_info().
 */
function cu_webauth_action_info() {
  return array(
    'cu_webauth_set_authentication_module' => array(
      'type' => 'user',
      'label' => t('Let user authenticate with CUWebAuth'),
      'behavior' => array('changes_property'),
      'configurable' => FALSE,
      'vbo_configurable' => FALSE,
      'triggers' => array('any'),
    ),
  );
}

/**
 * action for Views Bulk Operations to change authentication module for a user
 * @param  user $account    a user object
 * @param  [type] $context VBO context
 * @return [type]          nothing
 */
function cu_webauth_set_authentication_module(&$account, $context) {
  $module = AUTHENTICATION_MODULE_NAME;
  $authmaps = array(
    "authname_$module" => $account->name,
    );
  user_set_authmaps($account, $authmaps);
}

/**
 * Implements hook_user().
 * ONLY IN DRUPAL 6
 */
function cu_webauth_user_OLD($op, &$edit, &$account, $category = NULL) { }

/**
 * Implements hook_user_operations().
 */
function cu_webauth_user_operations() {
  return array(
    'export' => array(
      'label' => t('Let user authenticate with CUWebAuth'),
      'callback' => 'cu_webauth_claim_user',
    ),
  );
}

/**
 * Mark the user for CUWebAuth authentication
 * @param array $accounts
 */
function cu_webauth_claim_user($users, $view) {
  // see http://api.drupal.org/api/drupal/modules--user--user.module/function/user_external_login_register/6
  $module = AUTHENTICATION_MODULE_NAME;
  foreach ($users as $uid) {
    // TODO Convert "user_load" to "user_load_multiple" if "$uid" is other than a uid.
    // To return a single user object, wrap "user_load_multiple" with "array_shift" or equivalent.
    // Example: array_shift(user_load_multiple(array(), $uid))
    $auser = user_load($uid);
    $userinfo = array(
      "authname_$module" => $auser->name,
      );
    $account = user_save($auser, $userinfo);
  }
}

/**
 * return true if https
 */
function cu_webauth_https() {
  return (isset($_SERVER['HTTPS']) && !empty($_SERVER['HTTPS']));
}
